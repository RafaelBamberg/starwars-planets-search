{"ast":null,"code":"var _jsxFileName = \"/home/bamberg/sd-013-b-project-starwars-planets-search/src/context/StarWarsProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\n\nfunction StarWarsProvider({\n  children\n}) {\n  const [planets, setplanets] = useState([]);\n  const [sortColumn, setSortColumn] = useState('Name');\n  const [sortAscOrDesc, setSortAscOrDesc] = useState('ASC');\n  const [filter, setFilter] = useState({\n    filters: {\n      filterByName: {\n        name: ''\n      },\n      filterByNumericValues: [{\n        column: '',\n        comparison: '',\n        value: ''\n      }]\n    }\n  });\n  useEffect(() => {\n    async function fetchApi() {\n      let response = await fetch('https://swapi.dev/api/planets/');\n      response = await response.json();\n      setplanets(response.results);\n    }\n\n    fetchApi();\n  }, []);\n  console.log(result);\n  const sortedResult = result.sort((planetA, planetB) => planetA.name > planetB.name ? 1 : descending);\n  setData(sortedResult);\n  setPlanets(sortedResult);\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: {\n      planets,\n      setplanets,\n      filter,\n      setFilter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/bamberg/sd-013-b-project-starwars-planets-search/src/context/StarWarsProvider.js"],"names":["React","useState","useEffect","PropTypes","StarWarsContext","StarWarsProvider","children","planets","setplanets","sortColumn","setSortColumn","sortAscOrDesc","setSortAscOrDesc","filter","setFilter","filters","filterByName","name","filterByNumericValues","column","comparison","value","fetchApi","response","fetch","json","results","console","log","result","sortedResult","sort","planetA","planetB","descending","setData","setPlanets","propTypes","arrayOf","element","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,MAAD,CAA5C;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC;AACnCc,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAE;AADM,OADP;AAIPC,MAAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,MAAM,EAAE,EADV;AAEEC,QAAAA,UAAU,EAAE,EAFd;AAGEC,QAAAA,KAAK,EAAE;AAHT,OADqB;AAJhB;AAD0B,GAAD,CAApC;AAeAnB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeoB,QAAf,GAA0B;AACxB,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA1B;AACAD,MAAAA,QAAQ,GAAG,MAAMA,QAAQ,CAACE,IAAT,EAAjB;AACAjB,MAAAA,UAAU,CAACe,QAAQ,CAACG,OAAV,CAAV;AACD;;AACDJ,IAAAA,QAAQ;AACT,GAPQ,EAON,EAPM,CAAT;AASAK,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,QAAMC,YAAY,GAAGD,MAAM,CAACE,IAAP,CAAY,CAACC,OAAD,EAAUC,OAAV,KAC/BD,OAAO,CAACf,IAAR,GAAegB,OAAO,CAAChB,IAAvB,GAA8B,CAA9B,GAAkCiB,UADf,CAArB;AAGAC,EAAAA,OAAO,CAACL,YAAD,CAAP;AACAM,EAAAA,UAAU,CAACN,YAAD,CAAV;AAEA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAG;AACNvB,MAAAA,OADM;AAENC,MAAAA,UAFM;AAGNK,MAAAA,MAHM;AAINC,MAAAA;AAJM,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQIR,QARJ,CADF;AAYD;;AAEDD,gBAAgB,CAACgC,SAAjB,GAA6B;AAC3B/B,EAAAA,QAAQ,EAAEH,SAAS,CAACmC,OAAV,CAAkBnC,SAAS,CAACoC,OAA5B,EAAqCC;AADpB,CAA7B;AAIA,eAAenC,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\n\nfunction StarWarsProvider({ children }) {\n  const [planets, setplanets] = useState([]);\n  const [sortColumn, setSortColumn] = useState('Name');\n  const [sortAscOrDesc, setSortAscOrDesc] = useState('ASC');\n  const [filter, setFilter] = useState({\n    filters: {\n      filterByName: {\n        name: '',\n      },\n      filterByNumericValues: [\n        {\n          column: '',\n          comparison: '',\n          value: '',\n        },\n      ],\n    },\n  });\n\n  useEffect(() => {\n    async function fetchApi() {\n      let response = await fetch('https://swapi.dev/api/planets/');\n      response = await response.json();\n      setplanets(response.results);\n    }\n    fetchApi();\n  }, []);\n\n  console.log(result);\n  const sortedResult = result.sort((planetA, planetB) => (\n    planetA.name > planetB.name ? 1 : descending\n  ));\n  setData(sortedResult);\n  setPlanets(sortedResult);\n\n  return (\n    <StarWarsContext.Provider\n      value={ {\n        planets,\n        setplanets,\n        filter,\n        setFilter,\n      } }\n    >\n      { children }\n    </StarWarsContext.Provider>\n  );\n}\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/bamberg/sd-013-b-project-starwars-planets-search/src/context/StarWarsProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\n\nfunction StarWarsProvider({\n  children\n}) {\n  const [planets, setPlanets] = useState([]);\n  const [sortColumn, setSortColumn] = useState('Name');\n  const [sortAscOrDesc, setSortAscOrDesc] = useState('ASC');\n  const [filter, setFilter] = useState({\n    filters: {\n      filterByName: {\n        name: ''\n      },\n      filterByNumericValues: [],\n      order: {\n        column: 'Name',\n        sort: 'ASC'\n      }\n    }\n  }); // Feito com a ajuda do Lucas Caribe\n\n  useEffect(() => {\n    async function fetchApi() {\n      const response = await fetch('https://swapi.dev/api/planets/');\n      const {\n        results\n      } = await response.json();\n      results.sort((a, b) => a.name.localeCompare(b.name, 'en', {\n        numeric: true\n      }));\n      setPlanets(results);\n    }\n\n    fetchApi();\n  }, []);\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: {\n      planets,\n      setPlanets,\n      filter,\n      setFilter,\n      sortColumn,\n      sortAscOrDesc,\n      setSortAscOrDesc,\n      setSortColumn\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/bamberg/sd-013-b-project-starwars-planets-search/src/context/StarWarsProvider.js"],"names":["React","useState","useEffect","PropTypes","StarWarsContext","StarWarsProvider","children","planets","setPlanets","sortColumn","setSortColumn","sortAscOrDesc","setSortAscOrDesc","filter","setFilter","filters","filterByName","name","filterByNumericValues","order","column","sort","fetchApi","response","fetch","results","json","a","b","localeCompare","numeric","propTypes","arrayOf","element","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,MAAD,CAA5C;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC;AACnCc,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAE;AADM,OADP;AAIPC,MAAAA,qBAAqB,EAAE,EAJhB;AAKPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE,MADH;AAELC,QAAAA,IAAI,EAAE;AAFD;AALA;AAD0B,GAAD,CAApC,CAJsC,CAgBtC;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeoB,QAAf,GAA0B;AACxB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAMF,QAAQ,CAACG,IAAT,EAA1B;AACAD,MAAAA,OAAO,CAACJ,IAAR,CAAa,CAACM,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACV,IAAF,CAAOY,aAAP,CAAqBD,CAAC,CAACX,IAAvB,EAA6B,IAA7B,EAAmC;AAAEa,QAAAA,OAAO,EAAE;AAAX,OAAnC,CAAvB;AACAtB,MAAAA,UAAU,CAACiB,OAAD,CAAV;AACD;;AACDH,IAAAA,QAAQ;AACT,GARQ,EAQN,EARM,CAAT;AAUA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAG;AACNf,MAAAA,OADM;AAENC,MAAAA,UAFM;AAGNK,MAAAA,MAHM;AAINC,MAAAA,SAJM;AAKNL,MAAAA,UALM;AAMNE,MAAAA,aANM;AAONC,MAAAA,gBAPM;AAQNF,MAAAA;AARM,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYIJ,QAZJ,CADF;AAgBD;;AAEDD,gBAAgB,CAAC0B,SAAjB,GAA6B;AAC3BzB,EAAAA,QAAQ,EAAEH,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAAC8B,OAA5B,EAAqCC;AADpB,CAA7B;AAIA,eAAe7B,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\n\nfunction StarWarsProvider({ children }) {\n  const [planets, setPlanets] = useState([]);\n  const [sortColumn, setSortColumn] = useState('Name');\n  const [sortAscOrDesc, setSortAscOrDesc] = useState('ASC');\n  const [filter, setFilter] = useState({\n    filters: {\n      filterByName: {\n        name: '',\n      },\n      filterByNumericValues: [],\n      order: {\n        column: 'Name',\n        sort: 'ASC',\n      },\n    },\n  });\n  // Feito com a ajuda do Lucas Caribe\n  useEffect(() => {\n    async function fetchApi() {\n      const response = await fetch('https://swapi.dev/api/planets/');\n      const { results } = await response.json();\n      results.sort((a, b) => a.name.localeCompare(b.name, 'en', { numeric: true }));\n      setPlanets(results);\n    }\n    fetchApi();\n  }, []);\n\n  return (\n    <StarWarsContext.Provider\n      value={ {\n        planets,\n        setPlanets,\n        filter,\n        setFilter,\n        sortColumn,\n        sortAscOrDesc,\n        setSortAscOrDesc,\n        setSortColumn,\n      } }\n    >\n      { children }\n    </StarWarsContext.Provider>\n  );\n}\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}
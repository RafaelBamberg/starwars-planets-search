{"ast":null,"code":"var _jsxFileName = \"/home/bamberg/sd-013-b-project-starwars-planets-search/src/components/Table.jsx\";\nimport React, { useContext, useState } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction Table() {\n  const {\n    planets,\n    filter,\n    setFilter\n  } = useContext(StarWarsContext);\n  const [filterName, setFilterName] = useState('');\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [value, setValue] = useState('0');\n  const test = filter.filterByNumericValues;\n  const [newOptions, setNewOptions] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n\n  const removeGlobalSpecs = index => {\n    const temporaryGLobal = globalState.filter.filterByNumericValues;\n    temporaryGLobal.splice(index, 1);\n    setGlobalState({\n      filter: {\n        filterByNumericValues: temporaryGLobal\n      },\n      ...globalState\n    });\n  };\n\n  function createNewColumn(oldColumn) {\n    const newColumn = [...newOptions];\n    newColumn.splice(newColumn.indexOf(oldColumn), 1);\n    setNewOptions(newColumn);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    \"data-testid\": \"name-filter\",\n    onChange: event => setFilterName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    \"data-testid\": \"column-filter\",\n    onChange: event => setColumn(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, newOptions.map(option => /*#__PURE__*/React.createElement(\"option\", {\n    key: option,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, option))), /*#__PURE__*/React.createElement(\"select\", {\n    \"data-testid\": \"comparison-filter\",\n    onChange: event => setComparison(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"maior que\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"maior que\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"menor que\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"menor que\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"igual a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"igual a\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    \"data-testid\": \"value-filter\",\n    onChange: event => setValue(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"button-filter\",\n    onClick: () => {\n      setFilter({\n        filters: { ...filter.filters,\n          filterByNumericValues: [{\n            column,\n            comparison,\n            value\n          }]\n        }\n      });\n      createNewColumn(column);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Filtrar\"), test.map((specs, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    key: `Specs${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, specs.column), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, specs.comparison), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, specs.value), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => removeGlobalSpecs(index),\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"X\")))), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Rotation Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Orbital Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Diameter\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Climate\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Gravity\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Terrain\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"Surface Water\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"Population\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"Films\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Edited\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Url\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, planets.filter(planet => {\n    const values = filter.filters.filterByNumericValues[0];\n    let filteredResult = [];\n    console.log(values);\n\n    if (values.comparison === 'maior que') {\n      filteredResult = Number(planet[values.column]) > Number(values.value);\n    } else if (values.comparison === 'menor que') {\n      filteredResult = Number(planet[values.column]) < Number(values.value);\n    } else if (values.comparison === 'igual a') {\n      filteredResult = Number(planet[values.column]) === Number(values.value);\n    }\n\n    return filteredResult;\n  }).filter(planet => planet.name.toLowerCase().includes(filterName.toLowerCase())).map(planet => /*#__PURE__*/React.createElement(\"tr\", {\n    key: planet.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, planet.films), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, planet.url))))));\n}\n\nexport default Table;","map":{"version":3,"sources":["/home/bamberg/sd-013-b-project-starwars-planets-search/src/components/Table.jsx"],"names":["React","useContext","useState","StarWarsContext","Table","planets","filter","setFilter","filterName","setFilterName","column","setColumn","comparison","setComparison","value","setValue","test","filterByNumericValues","newOptions","setNewOptions","removeGlobalSpecs","index","temporaryGLobal","globalState","splice","setGlobalState","createNewColumn","oldColumn","newColumn","indexOf","event","target","map","option","filters","specs","planet","values","filteredResult","console","log","Number","name","toLowerCase","includes","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction Table() {\n  const { planets, filter, setFilter } = useContext(StarWarsContext);\n  const [filterName, setFilterName] = useState('');\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [value, setValue] = useState('0');\n  const test = filter.filterByNumericValues;\n  const [newOptions, setNewOptions] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n  const removeGlobalSpecs = (index) => {\n    const temporaryGLobal = globalState.filter.filterByNumericValues;\n    temporaryGLobal.splice(index, 1);\n    setGlobalState(\n      { filter: { filterByNumericValues: temporaryGLobal }, ...globalState },\n    );\n  };\n\n  function createNewColumn(oldColumn) {\n    const newColumn = [...newOptions];\n    newColumn.splice(newColumn.indexOf(oldColumn), 1);\n    setNewOptions(newColumn);\n  }\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        data-testid=\"name-filter\"\n        onChange={ (event) => setFilterName(event.target.value) }\n      />\n      <select\n        data-testid=\"column-filter\"\n        onChange={ (event) => setColumn(event.target.value) }\n      >\n        { newOptions.map((option) => (\n          <option key={ option } value={ option }>{ option }</option>\n        )) }\n      </select>\n      <select\n        data-testid=\"comparison-filter\"\n        onChange={ (event) => setComparison(event.target.value) }\n      >\n        <option value=\"maior que\">maior que</option>\n        <option value=\"menor que\">menor que</option>\n        <option value=\"igual a\">igual a</option>\n      </select>\n      <input\n        type=\"number\"\n        data-testid=\"value-filter\"\n        onChange={ (event) => setValue(event.target.value) }\n      />\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ () => {\n          setFilter({\n            filters: {\n              ...filter.filters,\n              filterByNumericValues: [\n                {\n                  column,\n                  comparison,\n                  value,\n                },\n              ],\n            },\n          });\n          createNewColumn(column);\n        } }\n      >\n        Filtrar\n      </button>\n      {test.map((specs, index) => (\n        <>\n          <p key={ `Specs${index}` }>{specs.column}</p>\n          <p>{specs.comparison}</p>\n          <p>{specs.value}</p>\n          <div data-testid=\"filter\">\n            <button\n              onClick={ () => removeGlobalSpecs(index) }\n              type=\"button\"\n            >\n              X\n            </button>\n          </div>\n        </>))}\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Rotation Period</th>\n            <th>Orbital Period</th>\n            <th>Diameter</th>\n            <th>Climate</th>\n            <th>Gravity</th>\n            <th>Terrain</th>\n            <th>Surface Water</th>\n            <th>Population</th>\n            <th>Films</th>\n            <th>Created</th>\n            <th>Edited</th>\n            <th>Url</th>\n          </tr>\n        </thead>\n        <tbody>\n          { planets\n            .filter((planet) => {\n              const values = filter.filters.filterByNumericValues[0];\n              let filteredResult = [];\n              console.log(values);\n              if (values.comparison === 'maior que') {\n                filteredResult = Number(planet[values.column]) > Number(values.value);\n              } else if (values.comparison === 'menor que') {\n                filteredResult = Number(planet[values.column]) < Number(values.value);\n              } else if (values.comparison === 'igual a') {\n                filteredResult = Number(planet[values.column]) === Number(values.value);\n              } return filteredResult;\n            })\n            .filter((planet) => planet.name.toLowerCase().includes(\n              filterName.toLowerCase(),\n            ))\n            .map((planet) => (\n              <tr key={ planet.name }>\n                <td>{ planet.name }</td>\n                <td>{ planet.rotation_period }</td>\n                <td>{ planet.orbital_period }</td>\n                <td>{ planet.diameter }</td>\n                <td>{ planet.climate }</td>\n                <td>{ planet.gravity }</td>\n                <td>{ planet.terrain }</td>\n                <td>{ planet.surface_water }</td>\n                <td>{ planet.population }</td>\n                <td>{ planet.films }</td>\n                <td>{ planet.created }</td>\n                <td>{ planet.edited }</td>\n                <td>{ planet.url }</td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}